@page "/admin/product"
@page "/admin/product/{id:int}"
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (loading)
{
    <span>@msg</span>
}
else
{
    @if (product.Editing)
    {
        <h3>Edit "@product.Name"</h3>
    }
    else if (product.IsNew)
    {
        <h3>Create a new Product</h3>
    }

    <EditForm Model="product" OnValidSubmit="AddOrUpdateProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="mb-0">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="product.Name" class="form-control"></InputText>
        </div>
        <div class="mb-0">
            <label for="imageUrl">Image Url</label>
            <InputText id="imageUrl" @bind-Value="product.ImageUrl" class="form-control"></InputText>
        </div>
        <div class="mb-0" style="display: flex; flex-wrap: wrap; flex-direction: row; justify-content: center;">
            @if (!string.IsNullOrEmpty(product.ImageUrl))
            {
                <img src="@product.ImageUrl" />
            }            
        </div>        
        <div class="mb-0">
            <label for="description">Description</label>
            <InputTextArea id="description" @bind-Value="product.Description" class="form-control"></InputTextArea>
        </div>
        <hr />       
        <div class="mb-0">
            <label for="category">Category</label>
            <InputSelect id="category" @bind-Value="product.CategoryId" class="form-control">
                @foreach (var category in CategoryService.AdminCategories)
                {
                <option value="@category.Id">@category.Name</option>
                }
        </InputSelect>
    </div>
    <hr />
     <div class="col">
            <InputNumber @bind-Value="product.Price" class="form-control" ></InputNumber>
        </div>
    <div class="form-check">
        <InputCheckbox id="visible" @bind-Value="product.Visible" class="form-check-input"></InputCheckbox>
        <label for="visible" class="form-check-label">Visible</label>
    </div>
    <hr />
    <button type="submit" class="btn btn-primary float-end">@btnText</button>
    <ValidationSummary></ValidationSummary>
</EditForm>
    @if (!product.IsNew)
    {
        <button type="button" class="btn btn-danger float-start" @onclick="DeleteProduct">
            Delete Product
        </button>
    }
}

@code {
    [Parameter]
    public int Id { get; set; }

    Product product = new Product();
    bool loading = true;
    string btnText = "";
    string msg = "Loading...";

    protected override async Task OnInitializedAsync()
    {
       await CategoryService.GetAdminCategoriesAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            product = new Product { IsNew = true };
            btnText = "Create Product";
        }
        else
        {
            Product dbProduct = (await ProductService.GetProductAsync(Id)).Data;
            if (dbProduct == null)
            {
                msg = $"Product with Id '{Id}' does not exist!";
                return;
            }
            product = dbProduct;
            product.Editing = true;
            btnText = "Update Product";
        }
        loading = false;
    }   

    async void AddOrUpdateProduct()
    {
        if (product.IsNew)
        {
            var result = await ProductService.CreateProductAsync(product);
            NavigationManager.NavigateTo($"admin/product/{result.Id}");
        }
        else
        {
            product.IsNew = false;
            product = await ProductService.UpdateProductAsync(product);
            NavigationManager.NavigateTo($"admin/product/{product.Id}", true);
        }
    }

    async void DeleteProduct()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            $"Do you really want to delete '{product.Name}'?");
        if (confirmed)
        {
            await ProductService.DeleteProductAsync(product);
            NavigationManager.NavigateTo("admin/products");
        }
    }   
}
