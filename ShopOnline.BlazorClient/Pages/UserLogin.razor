@page "/login"
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NaviagationManager
@inject ICartService CartService
@using Microsoft.AspNetCore.WebUtilities


<PageTitle>UserLogin</PageTitle>
<h3>UserLogin</h3>

<EditForm Model="user" OnValidSubmit="HandleLoginAsync">
    <DataAnnotationsValidator/>
     <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control" />
        <ValidationMessage For="@(() => user.Email)" />
    </div>
     <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />        
        <ValidationMessage For="@(() => user.Password)" />
    </div>     
    <button type="submit" class="btn-primary">Login</button>  
</EditForm>
<div class="text-danger">
    <span>@message</span>
</div>

@code {
    private Models.UserLogin user = new Models.UserLogin();
    private string message = string.Empty;
    private string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        var uri = NaviagationManager.ToAbsoluteUri(NaviagationManager.Uri);
        if(QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }

    private async Task HandleLoginAsync()
    {
        var result = await AuthService.LoginAsync(user);
        if(result.Success)
        {
            message = string.Empty;
            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthStateProvider.GetAuthenticationStateAsync();
            await CartService.StoreCartItemsAsync(true);
            NaviagationManager.NavigateTo(returnUrl);

        }
        else
            message = result.Message;       
    }

}
